#!/usr/bin/env bash

set -u

#%include search-help.sh
#%include copyright.sh

#%include std/autohelp.sh
#%include std/out.sh
#%include std/debug.sh
#%include std/bincheck.sh
#%include std/readkv.sh

#%include searchers.sh

autohelp:check "$@"

DOUPDATE=no
DEBUGMODE=no
ARGS=()
ARG1=
FILTER=.
: "${EXCLUDED_MANAGERS=}"
PAFS_PAGER=(less -R)
PAFS_config=/etc/alpacka/config.ini

while [[ -n "$@" ]]; do
    ARG="$1" ; shift
    case "$ARG" in
    -u|--update)
        DOUPDATE=yes
        ;;
    --debug)
        debug:mode output
        ;;
    -f|--filter)
        FILTER="$(echo $1|sed -r "s/[\"']//g")" ; shift
        ;;
    -h|--help)
        printhelp
        exit 0
        ;;
    -e|-e=)
        autohelp:print groups
        exit 0
        ;;
    -e=*)
        register_exclusions "${ARG#*=}"
        ;;
    --dump|-d)
        PAFS_PAGER=(cat)
        ;;
    *)
        ARGS+=("$ARG")
        ;;
    esac
done

# Read configuration plain
if [[ -f "$PAFS_config" ]]; then
    EXCLUDED_MANAGERS="${EXCLUDED_MANAGERS:-} $(readkv pafs_exclude "$PAFS_config")"
fi

[[ -n "${ARGS[*]+ARGS[*]}" ]] || out:fail "No search term provided"

ARG1="${ARGS[@]}"
debug:print "ARG1=$ARG1"

SFILE="$(mktemp)" || out:fail "Cannot create temp file"

if is_not_excluded os; then
    if trypkg paf; then
        doupdate paf -u
        searchit paf paf "${ARGS[@]}"

    elif trypkg emerge; then
        doupdate emerge sync
        searchit emerge emerge -s "$ARG1"
    fi
fi

if is_not_excluded externals; then
    trypkg snap && searchit snap snap find "${ARGS[@]}"

    trypkg flatpak && {
        doupdate flatpak update
        searchit flatpak flatpak search "${ARGS[@]}"
    }
fi

if is_not_excluded langs; then
    trypkg pip && searchit pip pip search "${ARGS[@]}"
    trypkg gem && searchit gem gem search "${ARGS[@]}"
    trypkg npm && searchit npm npm search "${ARGS[@]}"
    trypkg docpan && searchit cpan docpan "$ARG1"
    trypkg pear && searchit pear pear search "${ARGS[@]}"
    trypkg cargo && searchit cargo cargo search "${ARGS[@]}"
fi

# ================
# some more outlandish searches

if trypkg docker; then
    searchit Docker docker search "$ARG1"
fi

is_not_excluded web &&
    if bincheck:has elinks; then
        URLARG1="$(python -c "import urllib as u; print(u.quote('$ARG1'))")"
        namepat="[a-zA-Z0-9_.-]+"
        twonames="$namepat/$namepat"

        is_not_excluded github &&
            searchit github searchweb "github.com" "$URLARG1" "$twonames"

        is_not_excluded gitlab &&
            searchit gitlab searchweb "gitlab.com" "$URLARG1" "$twonames"

        is_not_excluded vagrant &&
            searchit vagrant searchweb "app.vagrantup.com" "$URLARG1" "$twonames"
    else
        out:warn "'elinks' is required for searching the web"
    fi


# ===============
# Local builds
if is_not_excluded local; then
    searchit "Local buildables" findpkg 'Makefile|install\.sh'

    # package management locally
    # findpkg looks for $ARG1 on its own

    trypkg dpkg yum dnf && searchit "Local RPM files" findpkg "\.rpm"

    trypkg dpkg && searchit "Local deb files" findpkg "\.deb"
fi

# ===========

"${PAFS_PAGER[@]}" "$SFILE"

rm "$SFILE"
