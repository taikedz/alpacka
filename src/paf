#!/usr/bin/env bash

set -euo pipefail

#%include autohelp.sh bincheck.sh args.sh runmain.sh out.sh readkv.sh

PAF_configdir="/etc/alpacka"

#%include warn.sh
#%include help.sh copyright.sh

paf:main() {
    if [[ "$1" = wait ]]; then
        shift
        paf:wait "$@"
        exit
    fi

    PAF_activities=(:)
    PAF_packages=(:)
    PAF_sources=(:)
    PAF_action=search
    PAF_assume=

    paf:preflight_check

    paf:load_configuration

    paf:get_package_manager

    paf:help "$@"
    if [[ -z "$*" ]]; then
        out:warn "Nothing to do. Try --help ."
        exit 0
    fi

    paf:parse_arguments "$@"

    paf:run_activity update

    if [[ -n "${PAF_action:-}" ]]; then
        # We pass "$@" in case it is needed
        #  but most actions just access ${PAF_packages[@]} directly
        "$PAF_pm:$PAF_action" "$@"
    fi

    paf:run_activity clean
}

paf:preflight_check() {
    bincheck:has grep || out:fail "'grep' command is required but was not found"

    bincheck:has less || . <(echo 'less() { cat - ; }')
}

paf:load_configuration() {
    local cfile="$PAF_configdir/config.ini"
    if [[ ! -f "$cfile" ]]; then
        return 0
    fi

    if [[ -z "${PAF_warning_sleep:-}" ]]; then
        PAF_warning_sleep="$(readkv warning_sleep "$cfile")"
    fi
}

paf:help() {
    if [[ "$*" =~ --help ]]; then
        autohelp:print help "$0"
        autohelp:print "help-${PAF_pm}" "$0"
        exit 0
    fi
}

paf:sudo() {
    local cmds=(:)
    if bincheck:has sudo; then
        cmds+=(sudo)
    else
        [[ "$UID" = 0 ]] || out:fail "No sudo, and you are not root"
    fi

    # tmux MUST be inside sudo - do not leave a rooted tmux in unpriveleged space!
    if [[ "$TERM" != screen ]] && bincheck:has tmux; then
        cmds+=(tmux new bash "$0" wait)
    fi

    "${cmds[@]:1}" "$@"
}

paf:wait() {
    "$@"
    read -p "Press Enter to finish ... "
}

paf:get_package_manager() {
    local drivers=(apt-get:dpkg dnf:rpm yum:rpm tazpkg: apk: zypper:rpm pacman)
    local drive

    for drive in "${drivers[@]}"; do
        PAF_pm="${drive%:*}" # general package manager e.g. apt
        PAF_bpm="${drive#*:}" # base package manager e.g. dpkg

        bincheck:has "$PAF_pm" || continue
        return
    done

    out:fail "You distro is unsupported"
}

paf:add_activity() {
    PAF_activities[${#PAF_activities[@]}]="$1"
}

paf:run_activity() {
    local activity="$1"
    if [[ "${PAF_activities[*]:-}" =~ "$activity" ]]; then
        "$PAF_pm:$activity"
    fi
}

paf:parse_arguments() {
    for arg in "$@"; do
        case "$arg" in
        -w)
            paf:warn:warn-set "$@"
            exit 0
            ;;
        -u*) paf:add_activity "update"
            PAF_flag_update="$arg"
            if [[ "$PAF_action" = search ]] && [[ "${#PAF_packages[@]}" -lt 2 ]]; then
                PAF_action=""
            fi
            ;;

        -c*)
            paf:add_activity "clean"
            PAF_flag_clean="$arg"
            if [[ "$PAF_action" = search ]]; then
                PAF_action=""
            fi
            ;;

        -g*)    PAF_action="upgrade" ; PAF_flag_upgrade="$arg" ;;
        -i*)    PAF_action="install" ; PAF_flag_install="$arg" ;;
        -r*)    PAF_action="remove"  ; PAF_flag_remove="$arg" ;;
        -l*)    PAF_action="list"    ; PAF_flag_list="$arg" ;;
        -s*)    PAF_action="show"    ; PAF_flag_show="$arg" ;;

        -y) PAF_assume="yes" ;;
        -n) PAF_assume="no" ;;

        *)
            PAF_packages[${#PAF_packages[@]}]="$arg"
            [[ -n "$PAF_action" ]] || PAF_action=search
            ;;
        esac
    done

    # blat the holders
    PAF_activities=("${PAF_activities[@]:1}")
    PAF_packages=("${PAF_packages[@]:1}")

    # Issue all warnings in bulk as soon as we know our activities
    #   so user sees them early
    paf:issue_warnings "${PAF_activities[@]:-}" "$PAF_action"
}

paf:issue_warnings() {
    local warning
    PAF_warned=false

    for warning in "$@"; do
        [[ -n "$warning" ]] || continue
        paf:warn:display "$warning"
    done

    if [[ "$PAF_warned" = true ]]; then
        paf:warn:grace-wait
    fi
}

#%include apt.sh dnf.sh tazpkg.sh apk.sh zypper.sh pacman.sh
# emerge.sh # To be implemented

runmain paf paf:main "$@"
