#!/usr/bin/env bash 

set -u

### xkcd Universal Installer Usage:help
#
# A modified version of the xkcd Universal Installer
# 
# 	Do not use in production
# 
# Tries a plethora of installers to get the package you want.
# 
# 	Inspired by https://xkcd.com/1654/
# 
# 	Do not use in production
# 
# If run without root privileges, this script will try to use pip in user mode, then try homebrew
# 
# If you run it with root permissions, language package managers will be attempted, docker, vagrant and steam will be tried, then flatpak and snap, then finally the OS package managers will be attempted.
# 
# Finally, we'll attempt to download a git repo, then a script directly.
# 
# 	Do not run in production
# 
# The logs are kept in ~/pafx-logs
# 
# 	Do not u...
# 	... you're a responsible person I hope.
#
###/doc

#%include copyright.sh

#%include std/out.sh
#%include std/autohelp.sh
#%include std/bincheck.sh

autohelp:check "$@"

LOGSD="$HOME/pafx-logs"

mkdir -p "$LOGSD"

function snafun {
	local thecommand="$1" ; shift

	bincheck:has "$thecommand" || return

	"$thecommand" "$@" 2>&1 | keeplog

	if [[ "$?" -lt 1 ]]; then exit; fi
}

function keeplog {
    tee -a "$LOGSD/${thecommand}.log" | tee -a "$LOGSD/global.log"
}

function localinstall {
    local lfile

    if [[ -f "$1" ]]; then
        snafun dpkg -i "$1"
        snafun rpm -i "$1"
        snafun tazpkg -i "$1"

	elif [[ -d "$1" ]]; then
		(
        cd "$1"
		if [[ -f configure ]] && [[ -f Makefile ]]; then
			configure-script
		elif [[ -f config.json ]] || [[ -f "$1/config.json" ]]; then
			composer "$1"
        fi

        for lfile in setup setup.sh install install.sh; do
            if [[ -f "$lfile" ]]; then
                snafun "./$lfile"
            fi
        done
		)
	fi
}

function composer {
	cd "$1"
	snafun php composer.phar install
}

function configure-script {
	make clean | keeplog
	./configure | keeplog
	make | keeplog
	snafun make install
}

function webscript {
	localdownload=/tmp/curl_"$(echo "$1"|sed -r 's/[^a-zA-Z0-9._-]+/_/g')"
	curl "$1" > "$localdownload" && cat "$localdownload" | bash 2>&1 | keeplog
	exit
}

function webpkg {
	localdownload=/tmp/curl_"$(echo "$1"|sed -r 's/[^a-zA-Z0-9._-]+/_/g')"
	curl "$1" > "$localdownload" | keeplog
    localinstall "$localdownload"
	exit
}

function searchweb {
	local QUERY="$1" ; shift
	local PATTERN="$1" ; shift
	elinks -dump 1 "https://encrypted.google.com/search?hl=en&q=$QUERY" | grep -P "$PATTERN" -o|head -n 1
}


# +++++++++++++++++++++++++++++++++
# Try without root access

[[ $UID -ne 0 ]] && {

    # That dangerous thing that shouldn't be done
    [[ "$1" =~ ^[a-z]+://.+.sh$ ]] && webscript "$1"

    snafun pip install "$1" --user
    snafun brew install "$1"
}

# User space ^
# +++++++++++++++
[[ "$UID" = 0 ]] || out:fail "You are not root - stopping here. I trust you are not in production?"
# +++++++++++++++
# Root space :

[[ "$1" =~ ^[a-z]+://.+\.(deb|rpm)$ ]] && webscript "$1"

out:warn "========================"
out:warn "You are on your own now."
echo -e "\n\n"
sleep 2

# Maybe it's in a local file or directory?
snafun localinstall "$1"

# Try language specific package managers
snafun npm install "$1"          # Server-side JavaScript
snafun pear install "$1"         # PHP
snafun cpanm "$1"                # Perl
snafun pip3 install "$1"         # Python 3
snafun pip install "$1"          # Python 2
snafun easy_install "$1"         # Legacy python
snafun gem install "$1"          # Ruby

# Try image distribution networks
snafun flatpak install flathub "$1"
snafun snap install "$1"
snafun docker run "$1"
snafun vagrant up "$1"
snafun steamcmd "+app_update" "$1" validate

# Try the system package managers
snafun apk add "$1"              # Alpine
snafun dnf install "$1"          # Fedora, RedHat 7+
snafun yum install "$1"          # All other RPM systems with yum
snafun apt-get install "$1"      # Debian family, incl Ubuntu
snafun pacman -Syu "$1"          # Arch standard
snafun yaourt -Syu "$1" --aur    # More arch, with AUR support
snafun zypper install "$1"       # OpenSUSE
snafun emerge "$1"               # Gentoo
snafun tazpkg -gi "$1"           # SliTaz
snafun pkg install "$1"          # FreeBSD

# Find some random github repo. First match will do. Yup.

if bincheck:has elinks && bincheck:has git; then
	giturl="$(searchweb "$1" "https://github.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9._-]+")"

	[[ -n "$giturl" ]] && git clone "$giturl" 2>&1 >/dev/null && snafun localinstall "$1"
fi

# and if even that failed

out:fail "..... could not find '$1', and BELIEVE ME -- I tried."
