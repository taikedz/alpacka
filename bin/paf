#!/usr/bin/env bash

set -euo pipefail


### PAF installer Usage:help
# 
# The `paf` command is a shorthand to allow use of a single command across distros.
#
# Run `paf` and let it determine whether to invoke apt-get, dnf or yum.
#
# ## ACTIVITIES AND OPTIONS
#
# Some package managers support independent activites to run before and after main actions.
#
#     -u
#         update the package database
#
#     -c
#         clean up interim packages and cache
#
#     -y
#         assume yes
#
# ACTIONS
# -------
#
# Only one action can be run at a time. The last one specified will be run. For example
#
#   paf -s htop
#
# would show info for htop, whereas
#
#   paf -s htop -i
#
# would install it.
#
#
#
# Search for keywords:
#
#    paf KEYWORDS ...
#
# Show info on each package
#
#    paf -s PACKAGES ...
#
# Install
#
#    paf -i PACKAGES ...
#
# Remove
#     
#     paf -r PACKAGES ...


##bash-libs: autohelp.sh @ f6496eca (1.1.4)

### autohelp:print [ SECTION [FILE] ] Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from your script, or a file, call the
# `autohelp:print` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#    ### <title> Usage:help
#    #
#    # <some content>
#    #
#    # end with "###/doc" on its own line (whitespaces before
#    # and after are OK)
#    #
#    ###/doc
#
# You can set a different help section by specifying a subsection
#
# 	autohelp:print section2
#
# > This would print a section defined in this way:
#
# 	### Some title Usage:section2
# 	# <some content>
# 	###/doc
#
# You can set a different comment character by setting the 'HELPCHAR' environment variable:
#
# 	HELPCHAR=%
#
###/doc

HELPCHAR='#'

function autohelp:print {
    local SECTION_STRING="${1:-}"; shift || :
    local TARGETFILE="${1:-}"; shift || :
    [[ -n "$SECTION_STRING" ]] || SECTION_STRING=help
    [[ -n "$TARGETFILE" ]] || TARGETFILE="$0"

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s+(.+?)\s+Usage:'"$SECTION_STRING"'\s*$'
        local SECEND='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s*/doc\s*$'
        local insec=false

        while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        insec=true
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"

                elif [[ "$insec" = true ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                insec=false
                        else
                echo "$secline" | sed -r "s/^\s*$HELPCHAR//g"
                        fi
                fi
        done < "$TARGETFILE"

        if [[ "$insec" = true ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
        fi
    echo ""
}

### autohelp:paged Usage:bbuild
#
# Display the help in the pager defined in the PAGER environment variable
#
###/doc
function autohelp:paged {
    : ${PAGER=less}
    autohelp:print "$@" | $PAGER
}

### autohelp:check Usage:bbuild
#
# Automatically print help and exit if "--help" is detected in arguments
#
# Example use:
#
#    #!/bin/bash
#
#    ### Some help Usage:help
#    #
#    # Some help text
#    #
#    ###/doc
#
#    #%include autohelp.sh
#
#    main() {
#        autohelp:check "$@"
#
#        # now add your code
#    }
#
#    main "$@"
#
###/doc
autohelp:check() {
    if [[ "$*" =~ --help ]]; then
        cols="$(tput cols)"
        autohelp:print | fold -w "$cols" -s || autohelp:print
        exit 0
    fi
}
##bash-libs: bincheck.sh @ f6496eca (1.1.4)

### bincheck:get COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	bincheck:get markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

bincheck:get() {
    local BINEXE=
    for binname in "$@"; do
        # Some implementations of `which` print error messages
        # Not useful here.
        BINEXE=$(which "$binname" 2>/dev/null)

        if [[ -n "$BINEXE" ]]; then
            echo "$BINEXE"
            return 0
        fi
    done
    return 1
}

### bincheck:has NAMES ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

bincheck:has() {
    [[ -n "$(bincheck:get "$@")" ]]
}

### bincheck:path NAME Usage:bbuild
#
# Determine the actual path to the command
#
# Relative paths are not expanded.
#
###/doc

bincheck:path() {
    local binname="$1"; shift || :

    [[ "$binname" =~ / ]] && { 
        # A relative path cannot be resolved, just check existence
        [[ -e "$binname" ]] && echo "$binname" || return 1

    } || binname="$(which "$binname" 2>/dev/null)"

    # `which` failed
    [[ -n "$binname" ]] || return 1

    [[ -h "$binname" ]] && {

        local pointedname="$(ls -l "$binname"|grep -oP "$binname.+"|sed "s|$binname -> ||")"
        bincheck:path "$pointedname" ; return "$?"
    
    } || echo "$binname"
}
##bash-libs: args.sh @ f6496eca (1.1.4)

##bash-libs: patterns.sh @ f6496eca (1.1.4)

### Useful patterns Usage:bbuild
#
# Some useful regex patterns, exported as environment variables.
#
# They are not foolproof, and you are encouraged to improve upon them.
#
# $PAT_blank - detects whether an entire line is empty or whitespace
# $PAT_comment - detects whether is a line is a script comment (assumes '#' as the comment marker)
# $PAT_num - detects whether the string is an integer number in its entirety
# $PAT_cvar - detects if the string is a valid C variable name
# $PAT_filename - detects if the string is a safe UNIX or Windows file name;
#   does not allow presence of whitespace or special characters aside from '_', '.', '-'
# $PAT_email - simple heuristic to determine whether a string looks like a valid email address
#
###/doc

export PAT_blank='^\s*$'
export PAT_comment='^\s*(#.*)?$'
export PAT_num='^[0-9]+$'
export PAT_cvar='^[a-zA-Z_][a-zA-Z0-9_]*$'
export PAT_filename='^[a-zA-Z0-9_.-]$'
export PAT_email="$PAT_filename@$PAT_filename.$PAT_cvar"

### args Usage:bbuild
#
# An arguments handling utility.
#
###/doc

### args:get TOKEN ARGS ... Usage:bbuild
#
# Given a TOKEN, find the argument value
#
# Typically called with the parent's arguments
#
# 	args:get --key "$@"
# 	args:get -k "$@"
#
# If TOKEN is an int, returns the argument at that index (starts at 1, negative numbers count from end backwards)
#
# If TOKEN starts with two dashes ("--"), expect the value to be supplied after an equal sign
#
# 	--token=desired_value
#
# If TOKEN starts with a single dash, and is a letter or a number, expect the value to be the following token
#
# 	-t desired_value
#
# Returns 1 if could not find anything appropriate.
#
###/doc

function args:get {
    local seek="$1"; shift || :

    if [[ "$seek" =~ $PAT_num ]]; then
        local arguments=("$@")

        # Get the index starting at 1
        local n=$((seek-1))
        # but do not affect wrap-arounds
        [[ "$n" -ge 0 ]] || n=$((n+1))

        echo "${arguments[$n]}"

    elif [[ "$seek" =~ ^--.+ ]]; then
        args:get_long "$seek" "$@"

    elif [[ "$seek" =~ ^-[a-zA-Z0-9]$ ]]; then
        args:get_short "$seek" "$@"

    else
        return 1
    fi
}

function args:get_short {
    local token="$1"; shift || :
    while [[ -n "$*" ]]; do
        local item="$1"; shift || :

        if [[ "$item" = "$token" ]]; then
            echo "$1"
            return 0
        fi
    done
    return 1
}

function args:get_long {
    local token="$1"; shift || :
    local tokenpat="^$token=(.*)$"

    for item in "$@"; do
        if [[ "$item" =~ $tokenpat ]]; then
            echo "${BASH_REMATCH[1]}"
            return 0
        fi
    done
    return 1
}

### args:has TOKEN ARGS ... Usage:bbuild
#
# Determines whether TOKEN is present on its own in ARGS
#
# Typically called with the parent's arguments
#
# 	args:has thing "$@"
#
# Returns 0 on success for example
#
# 	args:has thing "one" "thing" "or" "another"
#
# Returns 1 on failure for example
#
# 	args:has thing "one thing" "or another"
#
# "one thing" is not a valid match for "thing" as a token.
#
###/doc

function args:has {
    local token="$1"; shift || :
    for item in "$@"; do
        if [[ "$token" = "$item" ]]; then
            return 0
        fi
    done
    return 1
}

### args:after TOKEN ARGS ... Usage:bbuild
#
# Return all tokens after TOKEN via the RETARR_ARGSAFTER
#
#    myargs=(one two -- three "four and" five)
# 	args:after -- "${myargs[@]}"
#
# 	for a in "${RETARR_ARGSAFTER}"; do
# 		echo "$a"
# 	done
#
# The above prints
#
# 	three
# 	four and
# 	five
#
###/doc

function args:after {
    local token="$1"; shift || :
    
    local current_token="$1"; shift || :
    while [[ "$#" -gt 0 ]] && [[ "$current_token" != "$token" ]]; do
        current_token="$1"; shift || :
    done

    RETARR_ARGSAFTER=("$@")
}
##bash-libs: runmain.sh @ f6496eca (1.1.4)

### runmain SCRIPTNAME FUNCTION [ARGUMENTS ...] Usage:bbuild
#
# Runs the function FUNCTION with ARGUMENTS, only if the runtime
# name of the script matches SCRIPTNAME
#
# This allows you include a main-like function in your library
# that only runs if you use your lib as an executabl itself.
#
# For example, an image archiver could be:
#
# 	function archive_images {
# 		tar czf "$1.tgz" "$@"
# 	}
#
# 	runmain archiveimages.sh archive_images "$@"
#
# When included a different script, the runmain call does not fire the lib's function
#
# If the lib is compiled/made executable, and named "archiveimages.sh", the function runs.
#
# This is similar to `if __name__ == "__main__"` clauses in python
#
###/doc

function runmain {
    local required_name="$1"; shift || :
    local funcall="$1"; shift || :
    local scriptname="$(basename "$0")"

    if [[ "$required_name" = "$scriptname" ]]; then
        "$funcall" "$@"
    fi
}
##bash-libs: out.sh @ f6496eca (1.1.4)

##bash-libs: colours.sh @ f6496eca (1.1.4)

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo -e "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour")
#
# Requires processing of escape characters.
#
# Colours available:
#
# CRED, CBRED, HLRED -- red, bold red, highlight red
# CGRN, CBGRN, HLGRN -- green, bold green, highlight green
# CYEL, CBYEL, HLYEL -- yellow, bold yellow, highlight yellow
# CBLU, CBBLU, HLBLU -- blue, bold blue, highlight blue
# CPUR, CBPUR, HLPUR -- purple, bold purple, highlight purple
# CTEA, CBTEA, HLTEA -- teal, bold teal, highlight teal
#
# CDEF -- switches to the terminal default
# CUNL -- add underline
#
# Note that highlight and underline must be applied or re-applied after specifying a colour.
#
# If the session is detected as being in a pipe, colours will be turned off.
#   You can override this by calling `colours:check --color=always` at the start of your script
#
###/doc

##bash-libs: tty.sh @ f6496eca (1.1.4)

tty:is_ssh() {
    [[ -n "$SSH_TTY" ]] || [[ -n "$SSH_CLIENT" ]] || [[ "$SSH_CONNECTION" ]]
}

tty:is_pipe() {
    [[ ! -t 1 ]]
}

### colours:check ARGS Usage:bbuild
#
# Check the args to see if there's a `--color=always` or `--color=never`
#   and reload the colours appropriately
#
###/doc
colours:check() {
    if [[ "$*" =~ --color=always ]]; then
        COLOURS_ON=true
    elif [[ "$*" =~ --color=never ]]; then
        COLOURS_ON=false
    fi

    colours:define
    return 0
}

colours:auto() {
    if tty:is_pipe ; then
        COLOURS_ON=false
    else
        COLOURS_ON=true
    fi

    colours:define
    return 0
}

colours:define() {
    if [[ "$COLOURS_ON" = false ]]; then

        export CRED=''
        export CGRN=''
        export CYEL=''
        export CBLU=''
        export CPUR=''
        export CTEA=''

        export CBRED=''
        export CBGRN=''
        export CBYEL=''
        export CBBLU=''
        export CBPUR=''
        export CBTEA=''

        export HLRED=''
        export HLGRN=''
        export HLYEL=''
        export HLBLU=''
        export HLPUR=''
        export HLTEA=''

        export CDEF=''

    else

        export CRED=$(echo -e "\033[0;31m")
        export CGRN=$(echo -e "\033[0;32m")
        export CYEL=$(echo -e "\033[0;33m")
        export CBLU=$(echo -e "\033[0;34m")
        export CPUR=$(echo -e "\033[0;35m")
        export CTEA=$(echo -e "\033[0;36m")

        export CBRED=$(echo -e "\033[1;31m")
        export CBGRN=$(echo -e "\033[1;32m")
        export CBYEL=$(echo -e "\033[1;33m")
        export CBBLU=$(echo -e "\033[1;34m")
        export CBPUR=$(echo -e "\033[1;35m")
        export CBTEA=$(echo -e "\033[1;36m")

        export HLRED=$(echo -e "\033[41m")
        export HLGRN=$(echo -e "\033[42m")
        export HLYEL=$(echo -e "\033[43m")
        export HLBLU=$(echo -e "\033[44m")
        export HLPUR=$(echo -e "\033[45m")
        export HLTEA=$(echo -e "\033[46m")

        export CDEF=$(echo -e "\033[0m")

    fi
}

colours:auto

### Console output handlers Usage:bbuild
#
# Write data to console stderr using colouring
#
###/doc

### out:info MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function out:info {
    echo "$CGRN$*$CDEF" 1>&2
}

### out:warn MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function out:warn {
    echo "${CBYEL}WARN: $CYEL$*$CDEF" 1>&2
}

### out:defer MESSAGE Usage:bbuild
# Store a message in the output buffer for later use
###/doc
function out:defer {
    OUTPUT_BUFFER_defer[${#OUTPUT_BUFFER_defer[@]}]="$*"
}

# Internal
function out:buffer_initialize {
    OUTPUT_BUFFER_defer=(:)
}
out:buffer_initialize

### out:flush HANDLER ... Usage:bbuild
#
# Pass the output buffer to the command defined by HANDLER
# and empty the buffer
#
# Examples:
#
# 	out:flush echo -e
#
# 	out:flush out:warn
#
# (escaped newlines are added in the buffer, so `-e` option is
#  needed to process the escape sequences)
#
###/doc
function out:flush {
    [[ -n "$*" ]] || out:fail "Did not provide a command for buffered output\n\n${OUTPUT_BUFFER_defer[*]}"

    [[ "${#OUTPUT_BUFFER_defer[@]}" -gt 1 ]] || return 0

    for buffer_line in "${OUTPUT_BUFFER_defer[@]:1}"; do
        "$@" "$buffer_line"
    done

    out:buffer_initialize
}

### out:fail [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function out:fail {
    local ERCODE=127
    local numpat='^[0-9]+$'

    if [[ "$1" =~ $numpat ]]; then
        ERCODE="$1"; shift || :
    fi

    echo "${CBRED}ERROR FAIL: $CRED$*$CDEF" 1>&2
    exit $ERCODE
}

### out:error MESSAGE Usage:bbuild
# print a red error message to stderr
#
# unlike out:fail, does not cause script exit
###/doc
function out:error {
    echo "${CBRED}ERROR: ${CRED}$*$CDEF" 1>&2
}
### Warning messages Usage:help
#
# You can set a warning message with the -w flag to display a warning before carrying out any one action.
#
# This allows you to set a warning, with an opportunity to abort, before any defined action.
#
#   paf -w ACTION
#   sudo paf -w ACTION MESSAGE
# 
# The available actions are:
#
# install, clean, upgrade, update, list, show, search
#
# If MESSAGE is '.', then the message is cleared and will no longer show on actions.
#
# If no MESSAGE is provided, or it is an empty string, the current message is displayed.
#
###/doc

##bash-libs: isroot.sh @ f6496eca (1.1.4)


### isroot Usage:bbuild
# Test for root access
#
# If using cygwin, user is always root.
###/doc

function isroot {
    [[ "$UID" = 0 ]] || isroot:cygwin
}

### isroot:cygwin Usage:bbuild
# Returns whether running under cygwin.
#
# Typically a user under cygwin is root, except when they're not
#
# This utility exists as a reminder to check for cygwin.
###/doc

function isroot:cygwin {
    uname -o | grep -i cygwin -q
}

### isroot:require MESSAGE Usage:bbuild
# Require root. If script is not running as root,
# print message and exit
###/doc
function isroot:require {
    isroot || out:fail "$*"
}

PAF_warningdir="/etc/alpacka/warnings"

paf:warn() {
    local sleepsec=5

    if paf:warn:display "${1:-}"; then
        out:info "Press Ctrl+C within  $sleepsec seconds to abort, or Enter to continue ..."

        read -t $sleepsec
    fi
}

paf:warn:check-name() {
    [[ -n "${1:-}" ]] || {
        out:warn "(No warning section specified ... sleeping 5sec, press Ctrl+C to abort)"
        sleep 5
    }

    [[ "$1" =~ ^[a-z]+$ ]] || out:fail "invalid warning type '$1'"
}

paf:warn:is-set() {
    [[ -f "$1" ]] &&
        [[ $(grep -Ec ^ "$1") -gt 0 ]]
}

paf:warn:display() {
    paf:warn:check-name "${1:-}"

    local warnfile
    warnfile="$PAF_warningdir/${1}.txt"

    paf:warn:is-set "$warnfile" || return 1

    echo -n "$CBYEL" >&2
    cat "$warnfile"
    echo
    echo -n "$CDEF" >&2

    return 0
}

paf:warn:get-warning-args() {
    args:after -w "$@"

    [[ -n "${RETARR_ARGSAFTER[*]:-}" ]] || out:fail "No warning parameters ..."

    PAF_warntype=("${RETARR_ARGSAFTER[0]}")

    PAF_warnmessage=("${RETARR_ARGSAFTER[@]:1}")
    PAF_warnmessage="${PAF_warnmessage[*]:-}"
}

paf:warn:write() {
    isroot:require "You must be root to set warnings."

    mkdir -p "$PAF_warningdir"


    if [[ "$PAF_warnmessage" = "." ]]; then
        echo -n > "$PAF_warnpath"
    else
        echo -n "$PAF_warntype message: ${PAF_warnmessage}" > "$PAF_warnpath"
    fi

    out:info "Warning wwritten to $PAF_warnpath"
}

paf:warn:warn-set() {
    paf:warn:get-warning-args "$@"

    paf:warn:check-name "$PAF_warntype"

    PAF_warnpath="$PAF_warningdir/${PAF_warntype}.txt"

    if [[ -n "$PAF_warnmessage" ]]; then
        paf:warn:write
    
    else
        paf:warn:is-set "$PAF_warnpath" || out:fail "No warning set for '$PAF_warntype'"

        out:info "Contents of '$PAF_warnpath'"
        paf:warn:display "$PAF_warntype"
    fi
    exit
}

paf:main() {
    PAF_activities=(:)
    PAF_packages=(:)
    PAF_sources=(:)
    PAF_action=search
    PAF_assume=

    paf:get_package_manager

    paf:help "$@"
    if [[ -z "$*" ]]; then
        out:warn "Nothing to do. Try --help ."
        exit 0
    fi

    paf:parse_arguments "$@"

    paf:run_activity update

    if [[ -n "${PAF_action:-}" ]]; then
        paf:warn "$PAF_action"

        # We pass "$@" in case it is needed
        #  but most actions just access ${PAF_packages[@]} directly
        "$PAF_pm:$PAF_action" "$@"
    fi

    paf:run_activity clean
}

paf:help() {
    if [[ "$*" =~ --help ]]; then
        autohelp:print help "$0"
        autohelp:print "help-${PAF_pm}" "$0"
        exit 0
    fi
}

paf:sudo() {
    if bincheck:has sudo; then
        sudo "$@"
        return "$?"
    else
        [[ "$UID" = 0 ]] || out:fail "No sudo, and you are not root"

        "$@"
    fi
}

paf:get_package_manager() {
    local drivers=(apt-get:dpkg dnf:rpm yum:rpm tazpkg: apk: zypper:rpm ) # pacman)
    local drive

    for drive in "${drivers[@]}"; do
        PAF_pm="${drive%:*}" # general package manager e.g. apt
        PAF_bpm="${drive#*:}" # base package manager e.g. dpkg

        bincheck:has "$PAF_pm" || continue
        return
    done

    out:fail "You distro is unsupported"
}

paf:add_activity() {
    PAF_activities[${#PAF_activities[@]}]="$1"
}

paf:run_activity() {
    local activity="$1"
    if [[ "${PAF_activities[*]:-}" =~ "$activity" ]]; then
        paf:warn "$activity"
        "$PAF_pm:$activity"
    fi
}

paf:parse_arguments() {
    for arg in "$@"; do
        case "$arg" in
        -w)
            paf:warn:warn-set "$@"
            exit 0
            ;;
        -u) paf:add_activity "update"
            if [[ "$PAF_action" = search ]]; then
                PAF_action=""
            fi
            ;;

        -c)
            paf:add_activity "clean"
            if [[ "$PAF_action" = search ]]; then
                PAF_action=""
            fi
            ;;

        -g*)    PAF_action="upgrade" ;;
        -i*)    PAF_action="install" ;;
        -r*)    PAF_action="remove" ;;
        -l*)    PAF_action="list" ;;
        -s*)    PAF_action="show" ;;

        -y) PAF_assume="yes" ;;
        -n) PAF_assume="no" ;;

        *)  PAF_packages[${#PAF_packages[@]}]="$arg" ;;
        esac
    done

    # blat the holders
    PAF_activities=("${PAF_activities[@]:1}")
    PAF_packages=("${PAF_packages[@]:1}")
}

ppa:add() {
    bincheck:has add-apt-repository ||
        out:fail "PPAs are not supported on this system. Install 'add-apt-repository'"

    paf:sudo add-apt-repository "$1"
}

### APT-specific options Usage:help-apt-get
#
# APT specific options include
#
# `-ip` - use first package name as PPA source, install the remaining packages after adding the PPA:
#
#    paf -ip ppa:libreoffice/ppa libreoffice
#
# `-gg` - perform a dist-upgrade
#
# `-gR` - perform a release upgrade
#
###/doc

apt-get:assume() {
    if [[ "$PAF_assume" = yes ]]; then
        echo "-y"
    fi
}

apt-get:update() {
    paf:sudo apt-get update
}

apt-get:clean() {
    paf:sudo apt-get $(apt-get:assume) autoclean
    paf:sudo apt-get $(apt-get:assume) autoremove
}

apt-get:install() {
    local firstpackage
    firstpackage="${PAF_packages[0]}"

    if args:has "-ip" "$@"; then
        PAF_packages=("${PAF_packages[@]:1}")

        ppa:add "$firstpackage"
        apt-get:update
    fi

    if [[ -n "${PAF_packages[*]}" ]]; then
        paf:sudo apt-get install $(apt-get:assume) "${PAF_packages[@]:-}"
    fi
}

apt-get:remove() {
    paf:sudo apt-get remove $(apt-get:assume) "${PAF_packages[@]:-}"
}

apt-get:list() {
    dpkg --get-selections | less || return 0
}

apt-get:show() {
    local package

    for package in "${PAF_packages[@]:-}"; do
        apt-cache show "$package" | sed -r 's/^(Package: )/[1;33m===[0m\n\1/' | less -R
    done
}

apt-get:upgrade() {
    if args:has "-gg" "$@" ; then
        paf:sudo apt-get $(apt-get:assume) dist-upgrade
    elif args:has "-gR" "$@"; then
        paf:sudo do-release-upgrade $(apt-get:assume)
    else
        paf:sudo apt-get $(apt-get:assume) upgrade
    fi
}

apt-get:search() {
    apt-cache search "${PAF_packages[@]:-}" | less
}
dnf:assume() {
    if [[ "$PAF_assume" = yes ]]; then
        echo "-y"
    fi
}

dnf:update() {
    :
}

dnf:clean() {
    paf:sudo "$PAF_pm" clean
    paf:sudo "$PAF_pm" autoremove
}

dnf:install() {
    paf:sudo "$PAF_pm" install $(dnf:assume) "${PAF_packages[@]:-}"
}

dnf:remove() {
    paf:sudo "$PAF_pm" remove $(dnf:assume) "${PAF_packages[@]:-}"
}

dnf:list() {
    paf:sudo "$PAF_pm" list --installed | less
    return 0
}

dnf:show() {
    local package

    for package in "${PAF_packages[@]:-}"; do
        "$PAF_pm" info "$package" | less
    done
}

dnf:upgrade() {
    paf:sudo "$PAF_pm" upgrade
}

dnf:search() {
    "$PAF_pm" search "${PAF_packages[@]:-}" | less
}

yum:update() { dnf:update "$@" ; }
yum:clean() { dnf:clean "$@" ; }
yum:install() { dnf:install "$@" ; }
yum:remove() { dnf:remove "$@" ; }
yum:list() { dnf:list "$@" ; }
yum:show() { dnf:show "$@" ; }
yum:upgrade() { dnf:upgrade "$@" ; }
yum:search() { dnf:search "$@" ; }
### Tazpkg-specific options Usage:help-tazpkg
#
# Search:
#
# `-s` will perform an AND search, returning all packages with all the search terms
#
# `-so` will perform an or search, returning all packages with at least one of the search terms
#
###/doc

tazpkg:update() {
    paf:sudo tazpkg recharge
}

tazpkg:clean() {
    paf:sudo tazpkg clean-cache
    paf:sudo tazpkg autoremove
}

tazpkg:install() {
    local pkg
    for pkg in "${PAF_packages[@]:-}"; do
        paf:sudo tazpkg -gi "$pkg"
    done
}

tazpkg:remove() {
    local pkg
    for pkg in "${PAF_packages[@]:-}"; do
        paf:sudo tazpkg remove "$pkg"
    done
}

tazpkg:list() {
    tazpkg list | less || return 0
}

tazpkg:show() {
    local package

    for package in "${PAF_packages[@]:-}"; do
        tazpkg info "$package" | less -R
    done
}

tazpkg:upgrade() {
    paf:sudo tazpkg upgrade
}

tazpkg:search:and() {
    TERM="$1"; shift

    local tazres=$(tazpkg search "$TERM"|egrep -e '-[0-9]')

    while [[ -n "$@" ]]; do
        tazres=$(echo "$tazres" | grep "$1")
        shift
    done
    echo "$tazres"
}

tazpkg:search:or() {
    local tazres=
    while [[ -n "$@" ]]; do
        TERM="$1" ; shift
        tazres="$tazres $(tazpkg search "$TERM"| egrep -e '-[0-9]')"
        shift
    done
    echo "$tazres"|sort
}

tazpkg:search() {
    if bincheck:has "-so" "$@" ; then
        tazpkg:search:or "${PAF_packages[@]:-}" | less
    else
        tazpkg:search:and "${PAF_packages[@]:-}" | less
    fi
}
apk:update() {
    paf:sudo apk update
}

apk:clean() {
    paf:sudo apk clean
}

apk:install() {
    paf:sudo apk add "${PAF_packages[@]:-}"
}

apk:remove() {
    paf:sudo apk del "${PAF_packages[@]:-}"
}

apk:list() {
    apk info -vv |sort| less || return 0
}

apk:show() {
    local package

    for package in "${PAF_packages[@]:-}"; do
        apk info "$package" | less
    done
}

apk:upgrade() {
    paf:sudo apk upgrade
}

apk:search() {
    apk search "${PAF_packages[@]:-}" | less
}
### zypper-specific options Usage:help-zypper
#
# -g
#   Upgrade packages
#
# -gR
#   Distribution upgrade
#
###/doc

zypper:assume() {
    if [[ "$PAF_assume" = yes ]]; then
        echo "-y"
    fi
}

zypper:update() {
    :
}

zypper:clean() {
    paf:sudo zypper $(zypper:assume) clean
}

zypper:install() {
    paf:sudo zypper install $(zypper:assume) "${PAF_packages[@]:-}"
}

zypper:remove() {
    paf:sudo zypper remove $(zypper:assume) "${PAF_packages[@]:-}"
}

zypper:list() {
    zypper se --installed-only | grep -v -e 'patch\s*$' | less || return 0
}

zypper:show() {
    local package

    for package in "${PAF_packages[@]:-}"; do
        zypper info "$package" | less
    done
}

zypper:upgrade() {
    if args:has "-gR" "$@"; then
        paf:sudo zypper $(zypper:assume) dist-upgrade
    else
        paf:sudo zypper $(zypper:assume) update
    fi
}

zypper:search() {
    zypper search "${PAF_packages[@]:-}" | less
}
# zypper.sh pacman.sh emerge.sh # To be implemented

runmain paf paf:main "$@"
